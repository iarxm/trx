#!/bin/bash

# IAROM MADDEN mail@iarom.org
#
# linux - termux macros
#
# most used handles
# - mosh.imp
# - sshfs.imp
# - ip.pull && trx mosh.imp
# - ip.pull && trx sshfs.imp
#
# shortcuts
#   a)              trx mosh.imp ;;
#   b)              trx sshfs.imp ;;
#

cmd=$1 && shift 1

## vars

termux_gitshare_dir="$HOME/.local/share/aax/trx"
ip_termux="$termux_gitshare_dir/termux-ip-wlan"
ip_manual="$XDG_CACHE_HOME/termux-ip"
ipx="$(cat $ip_manual)"
ipy="$(cat $ip_termux)"
ip_ls="${ip_manual}_ls"


# termux vars

trx_r="/data/data/com.termux/files"
trx_h="$trx_r/home"
cfg_f="$trx_r/usr/etc/ssh/sshd_config"
dr_r="/storage/emulated/0/0/"

adr="$ipx:$dr_r"
sshfs_mnt="$HOME/.local/share/aaa/mnt/termux.a"


# funcs

_sshfs_cmd() {
    adr=$1
    mnt=$2
    shift 2
    sshfs $adr $mnt -p 8022 -o follow_symlinks -oStrictHostKeyChecking=no -C $@
}

adb_set() {
    # 2nd call sets up http server on termux
    adb forward tcp:8022 tcp:8022
    adb forward tcp:8080 tcp:8080
}

_init_ip_i() {
    ip_i=$1
}

_ssh()       { ssh -p 8022 $2 -i ~/.ssh/id_rsa $ip_i; }

_mosh()      { mosh --ssh="ssh -p 8022 -i ~/.ssh/id_rsa" $ip_i; }

_ip_pull()   {
    cd $termux_gitshare_dir
    git pull
    cat $ip_termux > $ip_manual
}

_ip_find() {
    # nmap scan local hotspot for ip address
    # - selects first one in list and saves it as the useable ip
    # - android ussually assings device ip as ..244
    # - the android device is usually below this - as the first one in the list
    nmap -n -sn 192.168.64.0/24 -oG - \
        | awk '/Up$/{print $2}' > $ip_ls
    head -n 1 $ip_ls > $ip_manual
}

_sshd_pass_switch() {
    printf "%s \n" "PrintMotd yes" \
        "PasswordAuthentication $1 " \
        "Subsystem sftp /data/data/com.termux/files/usr/libexec/sftp-server" > $cfg_f
}

exp_firefox() {
    dir_dat_moz="/data/data/org.mozilla.firefox/files/mozilla"
    sqlite3 $dir_dat_moz/*.default/browser.db "SELECT url FROM tabs ORDER BY position" > /sdcard/0/d/tabs
    cp $dir_dat_moz//*.default/ /sdcard/0s/firef.bkp
}


# termux

case $1 in
    pkg_ls) ;;   # GENERATE PACKAGE LISTS todo
    sshd_p_on)   _sshd_pass_switch "yes" ;;
    sshd_p_off)  _sshd_pass_switch "no" ;;
    exp_firefox) exp_firefox ;;
esac


# linux

case $cmd in
  # ip
    ip.pull)        _ip_pull ;;
    ip.set.a)       echo "192.168.$1" > $ip_manual ;;
    ip.set.b)       echo "$1" > $ip_manual ;;
    ip.set.c)       echo "192.168.$1" > $ip_manual ;; # partial input ip
    ip.echo)        cat $ip_manual ;;
    ip.echo.termux) cat $ip_termux ;;
    ip.find)        _ip_find ;;
  # sshfs
    sshfs|sshfs.termux) _sshfs_cmd "$ipy:~/"         $sshfs_mnt $@ ;;
    sshfs.manual)       _sshfs_cmd "$ipx:~/"         $sshfs_mnt $@ ;;
    sshfs.x)            _sshfs_cmd "x@neutron:$dr_r" $sshfs_mnt $@ ;;
    sshfs.adb)          adb_set;  _sshfs_cmd "localhost:$dr_r" $sshfs_mnt $@ ;;
  # ssh
    ssh|ssh.termux) _ssh "${ipy}" ;;
    ssh.manual)     _ssh "${ipx}" ;;
    ssh.x)          _ssh x@neutron $@ ;;
    ssh.usb)        adb_set; ssh -p 8022 localhost ;;
    ssh.copyid)     ssh-copy-id -p 8022 $ipx ;;
  # mosh
    mosh|mosh.termux) _mosh $ipy tmux ;;
    mosh.manual)      _mosh $ipx tmux ;;
    mosh.a)           _mosh $1 ;;
    mosh.x)           _mosh "x@neutron" ;;
esac


# rsync

rs_mv() {
    rsync -avP $opt \
        --remove-source-files \
        --prune-empty-dirs \
        -e 'ssh -p 8022' \
        $src $dst
}

rs_syc_cmd() {
    rsync -avP $opt \
        --delete \
        --exclude=$excl \
        -e 'ssh -p 8022' \
        $src $dst
}

rs_syc_lp() {
    src_ls=$(cat ${src_ls_file})
    
    for src_i in $src_ls; do
        [ ! -d $(readlink ${src_i}) ] && continue
        src=$src_root/$src_i
        rs_syc_cmd
    done
}

rs_syc_ini() {
    src="$src_root$src_i/"
    dst="$hst:$dst_root$dst_i/"
}


# syc & mv cases

case $cmd in
    syc-2t-ls) #TODO
        #task #src_ls="~/z0"
        dst="dr/"
        rs_syc_lp
        ;;
    syc-2t)
        # linux as master
        src="/dat/$1"
        dst="$ipy:~/0s/$2/"
        rs_syc
        ;;
    syc-2t-lsaa) #TODO
        src_ls_file="/home/$USER/.config/trx/syc-list-aa"
        hst="$1"
        rs_syc_lp
        ;;
    syc_imp_2sdlsaa) #TODO
        hst=$(cat $ip_manual)
        syc_2sdlsaa $hst
        ;;
    rs_syc_ip_imp) #TODO
        src_i="$1"
        dst_i="$2"
        opt="$3"
        hst="$(cat $ip_manual)"
        src_root="~/zs"
        dst_root="/data/ts"
        src="$hst:$src_prfx/$src_i"
        dst="$dst_prfx/$dst_i"
        rs_syc
        ;;
    rs_syc_ip_imp_full)
        # full backup of android 'storage' filesystem to /data
        src_i="/"
        dst_i="dr/syc.zs"
        drsycipf \
        ;;
    rs_syc_ip_netfrac)
        # - sync over LAN with android as master branch
        src_i=$1
        dst_i=$2
        hst="iao@netfrac"
        src_base="~/zs"
        dst_base="/data/ts"
        src="$hst:$src_base/$src_i"
        dst="$dst_base/$dst_i"
        rs_syc
        ;;
esac


# adb usb

case $cmd in
    rs_syc_adbusb_2sd)
        # laptop as master branch
        src_i="$1"
        dst_i="$2"
        opt="$3"
            
        hst="localhost"
        src_root="/data/h/iao"
        dst_root="~/sac"
            
        src="$src_root/$src_i/"
        dst="$hst:$dst_root/$dst_i/"
        adb_set
        rs_syc
        ;;
    rs_syc_usb_2sd_ls_a)
        src_ls_file="/home/$USER/.local/bin/drlsaa"
        opt="$1"
        ## fc
        r_for() {
            src_ls_file="$1"
            opt="$2"
            src_ls=$(cat $src_ls_file)
            
            for src in $src_ls; do
              if [ -d $(readlink $src) ]; then
                 rs_syc_adbusb_2sd "$src_i" "$dst_i" $opt
              fi
            done
        }
        ## exc
        r_for $src_ls_file \
            $opt
        ## docs
        #.'if' test above is important for filtering out list items which arent directories 
        #.. each a typo which leads to the list item being root -
        #.. rclone then syncs the whole contents of root..
        #dst_prfx="$3"
        ;;
    rs_syc_usb)
        ## syncing files with android as master branch
        ## vr
        src_i="$1/"
        dst_i="$2/"
        opt="$3"
            
        hst="localhost"
        src_root="~/zs"
        dst_root="/data/ts"
        src="$hst:$src_root/$src_i"
        dst="$dst_root/$dst_i"
        adb_set
        rs_syc $src $dst $opt
        ;;
    syc_usb_bkful() {
        # full backup of android 'storage' filesystem
        src_i="/"
        dst_i="dr/syc.zs"
        opt="$1"
        rs_syc_usb
        ;;
    syc-usb-2trx)
        src="/data/ts/$1"
        dst="localhost:~/zs/$2"
        adb_set
        rs_syc_cmd
        ;;
    mv-usb-2dat)
        src="~/$1"
        dst="localhost:/dat/ts/$2" \
        adb_set
        rs_mv
        ;;
    mv-usb-2trx)
        hst="localhost"
        src_prfx="/data"
        dst_prfx="~/zs"
        src="$src_prfx/$1"
        dst="$hst:$dest_prfx/$2"
        opt="$3"
        adb_set
        rs_mv
        ;;
esac

# TODO
# - [x] Move to separate repo
# - [x] Restructure the file adequately from it's original multifile setup
# - [ ] MAKE ctags regex to match cases
# - [ ] TODO: AUTOCOMPLETION FUNCTIONALITY??
# TODO: write a script to automate the setup of git dirs??
#mosh.usb)      _adb_set; _mosh iao@localhost ;;
## no need for mosh over usb?? unless in the case of a flimsy usb connection??
# for any files to sync from android
# first move them locally into a logical hiearchy
# ~/0z/ ..:
# OpenNoteScanner/
# scn/
# on laptop
# /dat/xs/trx/scnii/
# localhost:~/0z/scn/ \

